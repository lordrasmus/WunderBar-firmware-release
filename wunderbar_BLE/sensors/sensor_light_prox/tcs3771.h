
#ifndef _TCS3771_
#define _TCS3771_

//#include "anykey/i2c.h"

#define TCS3771_1_I2C_ADDR 0x39
#define TCS3771_3_I2C_ADDR 0x39
#define TCS3771_5_I2C_ADDR 0x29
 #define TCS3771_7_I2C_ADDR 0x29

typedef enum {
/* RW */
  TCS3771_CMD_REG_ENABLE = 0x00, // Enables states and interrupts 
  TCS3771_CMD_REG_ATIME  = 0x01, // RGBC ADC time
  TCS3771_CMD_REG_PTIME  = 0x02, // Proximity ADC time
  TCS3771_CMD_REG_WTIME  = 0x03, // Wait time

  /* RGBC Interrupt Threshold Registers */
  TCS3771_CMD_REG_AILTL  = 0x04, // RGBC interrupt low threshold low byte
  TCS3771_CMD_REG_AILTH  = 0x05, // RGBC interrupt low threshold high byte
  TCS3771_CMD_REG_AIHTL  = 0x06, // RGBC interrupt high threshold low byte
  TCS3771_CMD_REG_AIHTH  = 0x07, // RGBC interrupt high threshold high byte

  /* Proximity Interrupt Threshold Registers */  
  TCS3771_CMD_REG_PILTL  = 0x08, // Proximity interrupt low threshold low byte
  TCS3771_CMD_REG_PILTH  = 0x09, // Proximity interrupt low threshold high byte
  TCS3771_CMD_REG_PIHTL  = 0x0A, // Proximity interrupt high threshold low byte
  TCS3771_CMD_REG_PIHTH  = 0x0B, // Proximity interrupt high threshold high byte

  TCS3771_CMD_REG_PERS   = 0x0C, // Interrupt persistence filters
  TCS3771_CMD_REG_CONFIG = 0x0D, // Configuration
  TCS3771_CMD_REG_PPCOUNT= 0x0E, // Proximity Pulse Count
  TCS3771_CMD_REG_CONTROL= 0x0F, // Gain Control Register

/* RO */

  TCS3771_CMD_REG_ID     = 0x12, // Device ID     
  TCS3771_CMD_REG_STATUS = 0x13, // Device status 

  /* RGBC Channel Data Registers */
  TCS3771_CMD_REG_CDATA  = 0x14, // Clear ADC low data register
  TCS3771_CMD_REG_CDATAH = 0x15, // Clear ADC high data register
  TCS3771_CMD_REG_RDATA  = 0x16, // Red ADC low data register
  TCS3771_CMD_REG_RDATAH = 0x17, // Red ADC high data register
  TCS3771_CMD_REG_GDATA  = 0x18, // Green ADC low data register
  TCS3771_CMD_REG_GDATAH = 0x19, // Green ADC high data registe
  TCS3771_CMD_REG_BDATA  = 0x1A, // Blue ADC low data register
  TCS3771_CMD_REG_BDATAH = 0x1B, // Blue ADC high data register

  /* Proximity Data Registers */
  TCS3771_CMD_REG_PDATA  = 0x1C, // Proximity ADC low data register
  TCS3771_CMD_REG_PDATAH = 0x1D  // Proximity ADC high data register
} tcs3771_cmd_reg_t;


// Command Register
// Command registers the address of the target register for future write and read operations.
//     p.17
// Selects type of transaction to follow in subsequent data transfer
typedef enum {
  TCS3771_CMD_TYPE_REPEATED = 0x00,
  TCS3771_CMD_TYPE_AUTOINC  = 0x02,
  TCS3771_CMD_TYPE_SPECIAL  = 0x03
} tcs3771_cmd_type_t;

#define TCS3771_CMD_TYPE_SHIFT 5

typedef enum {
  TCS3771_CMD_ADD_NORMAL            = 0x00,
  TCS3771_CMD_ADD_INT_CLR_PROX      = 0x05,
  TCS3771_CMD_ADD_INT_CLR_RGBC      = 0x06,
  TCS3771_CMD_ADD_INT_CLR_RGBC_PROX = 0x07
} tcs3771_cmd_add_t;

#define TCS3771_CMD_ADD_SHIFT 0



// Enable Register (0x00) 
// The Enable register is used primarily to power the TCS3771 device on
// and off, and enable functions and interrupts.  (p.18)

typedef enum {
  TCS3771_ENABLE_PON  = 0x01,   // Power ON
  TCS3771_ENABLE_AEN  = 0x02,   // RGBC  enable
  TCS3771_ENABLE_PEN  = 0x04,   // Proximity enable
  TCS3771_ENABLE_WEN  = 0x08,   // Wait enable
  TCS3771_ENABLE_AIEN = 0x10,   // RGBC interrupt enable
  TCS3771_ENABLE_PIEN = 0x20    // Proximity interrupt enable
} tcs3771_enable_t;


// RGBC Timing Register (0x01)
// The RGBC timing register controls the internal integration time of
// the RGBC clear and IR channel ADCs in 2.4-ms increments.

// Proximity Time Control Register (0x02)
// The proximity timing register controls the integration time of the
// proximity ADC in 2.4 ms increments. It is recommended that this
// register be programmed to a value of 0xFF (1 cycle, 1023 bits).

// Wait Time Register (0x03)
// Wait time is set 2.4 ms increments unless the WLONG bit is asserted in
// which case the wait times are 12× longer. WTIME is programmed as a 2’s
// complement number

// RGBC Interrupt Threshold Registers (0x04 − 0x07)
// The RGBC interrupt threshold registers provides the values to be used as
// the high and low trigger points for the comparison function for
// interrupt generation. If the value generated by the clear channel
// crosses below the lower threshold specified, or above the higher
// threshold, an interrupt is asserted on the interrupt


// Proximity Interrupt Threshold Registers (0x08 − 0x0B)
// The proximity interrupt threshold registers provide the values to be
// used as the high and low trigger points for the comparison function for
// interrupt generation. If the value generated by proximity channel
// crosses below the lower threshold specified, or above the higher
// threshold, an interrupt is signalled to the host processor

// Persistence Register (0x0C)
// The persistence register controls the filtering interrupt capabilities
// of the device. Configurable filtering is provided to allow interrupts to
// be generated after each integration cycle or if the integration has
// produced a result that is outside of the values specified by the
// threshold register for some specified amount of time. Separate filtering
// is provided for proximity and the RGBC clear channel.

typedef enum {
  TCS3771_PERS_PROX_EVERY = 0x00,   //Every proximity cycle generates an interrupt
  TCS3771_PERS_PROX_1     = 0x10,   //1 proximity value outside of threshold range
  TCS3771_PERS_PROX_2     = 0x20,   //2 proximity value outside of threshold range
  TCS3771_PERS_PROX_3     = 0x30,   //3 proximity value outside of threshold range
  TCS3771_PERS_PROX_4     = 0x40,   //4 proximity value outside of threshold range
  TCS3771_PERS_PROX_5     = 0x50,   //5 proximity value outside of threshold range
  TCS3771_PERS_PROX_6     = 0x60,   //6 proximity value outside of threshold range
  TCS3771_PERS_PROX_7     = 0x70,   //7 proximity value outside of threshold range
  TCS3771_PERS_PROX_8     = 0x80,   //8 proximity value outside of threshold range
  TCS3771_PERS_PROX_9     = 0x90,   //9 proximity value outside of threshold range
  TCS3771_PERS_PROX_10    = 0xa0,   //10 proximity value outside of threshold range
  TCS3771_PERS_PROX_11    = 0xb0,   //11 proximity value outside of threshold range
  TCS3771_PERS_PROX_12    = 0xc0,   //12 proximity value outside of threshold range
  TCS3771_PERS_PROX_13    = 0xd0,   //13 proximity value outside of threshold range
  TCS3771_PERS_PROX_14    = 0xe0,   //14 proximity value outside of threshold range
  TCS3771_PERS_PROX_15    = 0xf0    //15 proximity value outside of threshold range
} tcs3771_pers_prox_t;
#define TCS3771_PERS_PROX_MASK 0xf0

typedef enum {
  TCS3771_PERS_BRIGHT_EVERY = 0x00,   //Every RGBC cycle generates an interrupt
  TCS3771_PERS_BRIGHT_1     = 0x01,   //1 clear channel value outside of threshold range
  TCS3771_PERS_BRIGHT_2     = 0x02,   //2 clear channel value outside of threshold range
  TCS3771_PERS_BRIGHT_3     = 0x03,   //3 clear channel value outside of threshold range
  TCS3771_PERS_BRIGHT_5     = 0x04,   //5 clear channel value outside of threshold range
  TCS3771_PERS_BRIGHT_10    = 0x05,   //10 clear channel value outside of threshold range
  TCS3771_PERS_BRIGHT_15    = 0x06,   //15 clear channel value outside of threshold range
  TCS3771_PERS_BRIGHT_20    = 0x07,   //20 clear channel value outside of threshold range
  TCS3771_PERS_BRIGHT_25    = 0x08,   //25 clear channel value outside of threshold range
  TCS3771_PERS_BRIGHT_30    = 0x09,   //30 clear channel value outside of threshold range
  TCS3771_PERS_BRIGHT_35    = 0x0a,   //35 clear channel value outside of threshold range
  TCS3771_PERS_BRIGHT_40    = 0x0b,   //40 clear channel value outside of threshold range
  TCS3771_PERS_BRIGHT_45    = 0x0c,   //45 clear channel value outside of threshold range
  TCS3771_PERS_BRIGHT_50    = 0x0d,   //50 clear channel value outside of threshold range
  TCS3771_PERS_BRIGHT_55    = 0x0e,   //55 clear channel value outside of threshold range
  TCS3771_PERS_BRIGHT_60    = 0x0f    //60 clear channel value outside of threshold range
} tcs3771_pers_bright_t;
#define TCS3771_PERS_BRIGHT_MASK 0x0f


// Configuration Register (0x0D)
// The configuration register sets the wait long time.

typedef enum {
  TCS3771_CONFIG_WAIT_SHORT = 0x00,
  TCS3771_CONFIG_WAIT_LONG  = 0x02
} tcs3771_config_longwait_t;

// Proximity Pulse Count Register (0x0E)
// 
// The proximity pulse count register sets the number of proximity pulses
// that will be transmitted. When proximity detection is enabled, a
// proximity detect cycle occurs after each RGBC cycle. PPULSE defines the
// number of pulses to be transmitted.
// 
// NOTE: The ATIME register will be used to time the interval between
// proximity detection events even if the RGBC function is disabled.


// Control Register (0x0F)
// The Control register provides eight bits of miscellaneous control to the
// analog block. These bits typically control functions such as gain
// settings and/or diode selection.
// Consist of four 2 bit blocks:
//
// | PDRIVE | PDIODE | reserv | AGAIN |
// |  7  6  |  5  4  |  3  2  |  1  0 | (bit)  

// LED Drive Strength.
typedef enum {
  TCS3771_CTL_PDRIVE_MA_100  = 0x00,
  TCS3771_CTL_PDRIVE_MA_50   = 0x40,
  TCS3771_CTL_PDRIVE_MA_25   = 0x80,
  TCS3771_CTL_PDRIVE_MA_12_5 = 0xc0
} tcs3771_ctl_pdrive_t;

#define TCS3771_CTL_PDRIVE_MASK 0xc0

// Proximity Diode Select.
typedef enum {
  TCS3771_CTL_PDIODE_CLEAR      = 0x10,
  TCS3771_CTL_PDIODE_RED        = 0x20,
  TCS3771_CTL_PDIODE_CLEAR_RED  = 0x30
} tcs3771_ctl_pdiode_t;

#define TCS3771_CTL_PDIODE_MASK 0x30

// RGBC Gain Control  
typedef enum {
  TCS3771_CTL_AGAIN_1          = 0x00,
  TCS3771_CTL_AGAIN_4          = 0x01,
  TCS3771_CTL_AGAIN_16         = 0x02,
  TCS3771_CTL_AGAIN_60         = 0x03
} tcs3771_ctl_again_t;

#define TCS3771_CTL_AGAIN_MASK 0x03

// ID Register (0x12)
// The ID Register provides the value for the part number. The ID
// register is a read-only register.

typedef enum {
  TCS3771_ID_1_5           = 0x18,
  TCS3771_ID_3_7           = 0x19
} tcs3771_id_t;

// Status Register (0x13)
// The Status Register provides the internal status of the device. This
// register is read only.
typedef enum {
  TCS3771_STATUS_PINT_MASK = 0x20,
  TCS3771_STATUS_AINT_MASK = 0x10,
  TCS3771_STATUS_PVALID_MASK = 0x02,
  TCS3771_STATUS_AVALID_MASK = 0x01
} tcs3771_status_reg_t;

// RGBC Channel Data Registers (0x14 − 0x1B)

// Proximity Data Registers (0x1C - 0x1D)


#endif
